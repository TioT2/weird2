/// System font data (256 8x8 1bit images)
const FONT: [u64; 256] = [
    0x0000000000000000, 0x7E81A581BD99817E, 0x7EFFDBFFC3E7FF7E, 0x6CFEFEFE7C381000,
    0x10387CFE7C381000, 0x387C38FEFED61038, 0x10387CFEFE7C1038, 0x0000183C3C180000,
    0xFFFFE7C3C3E7FFFF, 0x003C664242663C00, 0xFFC399BDBD99C3FF, 0x0F070F7DCCCCCC78,
    0x3C6666663C187E18, 0x3F333F303070F0E0, 0x7F637F636367E6C0, 0x18DB3CE7E73CDB18,
    0x80E0F8FEF8E08000, 0x020E3EFE3E0E0200, 0x183C7E18187E3C18, 0x6666666666006600,
    0x7FDBDB7B1B1B1B00, 0x3E613C66663C867C, 0x000000007E7E7E00, 0x183C7E187E3C18FF,
    0x183C7E1818181800, 0x181818187E3C1800, 0x00180CFE0C180000, 0x003060FE60300000,
    0x0000C0C0C0FE0000, 0x002466FF66240000, 0x00183C7EFFFF0000, 0x00FFFF7E3C180000,
    0x0000000000000000, 0x183C3C1818001800, 0x6666240000000000, 0x6C6CFE6CFE6C6C00,
    0x183E603C067C1800, 0x00C6CC183066C600, 0x386C3876DCCC7600, 0x1818300000000000,
    0x0C18303030180C00, 0x30180C0C0C183000, 0x00663CFF3C660000, 0x0018187E18180000,
    0x0000000000181830, 0x0000007E00000000, 0x0000000000181800, 0x060C183060C08000,
    0x7CC6CED6E6C67C00, 0x1838181818187E00, 0x7CC6061C3066FE00, 0x7CC6063C06C67C00,
    0x1C3C6CCCFE0C1E00, 0xFEC0C0FC06C67C00, 0x3860C0FCC6C67C00, 0xFEC60C1830303000,
    0x7CC6C67CC6C67C00, 0x7CC6C67E060C7800, 0x0018180000181800, 0x0018180000181830,
    0x060C1830180C0600, 0x00007E00007E0000, 0x6030180C18306000, 0x7CC60C1818001800,
    0x7CC6DEDEDEC07800, 0x386CC6FEC6C6C600, 0xFC66667C6666FC00, 0x3C66C0C0C0663C00,
    0xF86C6666666CF800, 0xFE6268786862FE00, 0xFE6268786860F000, 0x3C66C0C0CE663A00,
    0xC6C6C6FEC6C6C600, 0x3C18181818183C00, 0x1E0C0C0CCCCC7800, 0xE6666C786C66E600,
    0xF06060606266FE00, 0xC6EEFEFED6C6C600, 0xC6E6F6DECEC6C600, 0x7CC6C6C6C6C67C00,
    0xFC66667C6060F000, 0x7CC6C6C6C6CE7C0E, 0xFC66667C6C66E600, 0x7CC660380CC67C00,
    0x7E7E5A1818183C00, 0xC6C6C6C6C6C67C00, 0xC6C6C6C6C66C3800, 0xC6C6C6D6D6FE6C00,
    0xC6C66C386CC6C600, 0x6666663C18183C00, 0xFEC68C183266FE00, 0x3C30303030303C00,
    0xC06030180C060200, 0x3C0C0C0C0C0C3C00, 0x10386CC600000000, 0x00000000000000FF,
    0x30180C0000000000, 0x0000780C7CCC7600, 0xE0607C666666DC00, 0x00007CC6C0C67C00,
    0x1C0C7CCCCCCC7600, 0x00007CC6FEC07C00, 0x3C6660F86060F000, 0x000076CCCC7C0CF8,
    0xE0606C766666E600, 0x1800381818183C00, 0x060006060666663C, 0xE060666C786CE600,
    0x3818181818183C00, 0x0000ECFED6D6D600, 0x0000DC6666666600, 0x00007CC6C6C67C00,
    0x0000DC66667C60F0, 0x000076CCCC7C0C1E, 0x0000DC766060F000, 0x00007EC07C06FC00,
    0x3030FC3030361C00, 0x0000CCCCCCCC7600, 0x0000C6C6C66C3800, 0x0000C6D6D6FE6C00,
    0x0000C66C386CC600, 0x0000C6C6C67E06FC, 0x00007E4C18327E00, 0x0E18187018180E00,
    0x1818181818181800, 0x7018180E18187000, 0x76DC000000000000, 0x0010386CC6C6FE00,
    0x3E66C6C6FEC6C600, 0xFE66607C6666FC00, 0xFC66667C6666FC00, 0xFE6660606060F000,
    0x1E3666666666FFC3, 0xFE6268786862FE00, 0xD6D67C387CD6D600, 0x7CC6063C06C67C00,
    0xC6C6CEDEF6E6C600, 0x38C6CEDEF6E6C600, 0xE6666C786C66E600, 0x1E3666666666C600,
    0xC6EEFEFED6C6C600, 0xC6C6C6FEC6C6C600, 0x7CC6C6C6C6C67C00, 0xFEC6C6C6C6C6C600,
    0xFC6666667C60F000, 0x7CC6C0C0C0C67C00, 0x7E5A181818183C00, 0xC6C6C67E06C67C00,
    0x7CD6D6D67C103800, 0xC6C66C386CC6C600, 0xCCCCCCCCCCCCFE06, 0xC6C6C67E06060600,
    0xD6D6D6D6D6D6FE00, 0xD6D6D6D6D6D6FF03, 0xF0F0B03C36363C00, 0xC6C6C6F6DEDEF600,
    0xF060607C66667C00, 0x788C063E068C7800, 0xDCD6D6F6D6D6DC00, 0x7EC6C6C67E66C600,
    0x0000780C7CCC7600, 0x067CC07CC6C67C00, 0x0000FC667C66FC00, 0x0000FE666060F000,
    0x00003C6C6C6CFEC6, 0x00007CC6FEC07C00, 0x0000D67C387CD600, 0x00007CC61CC67C00,
    0x0000C6CEDEF6E600, 0x0038C6CEDEF6E600, 0x0000E66C786CE600, 0x00003E666666E600,
    0x0000C6FEFED6C600, 0x0000C6C6FEC6C600, 0x00007CC6C6C67C00, 0x0000FEC6C6C6C600,
    0x1144114411441144, 0x55AA55AA55AA55AA, 0xDD77DD77DD77DD77, 0x1818181818181818,
    0x181818F818181818, 0x18F818F818181818, 0x363636F636363636, 0x000000FE36363636,
    0x00F818F818181818, 0x36F606F636363636, 0x3636363636363636, 0x00FE06F636363636,
    0x36F606FE00000000, 0x363636FE00000000, 0x18F818F800000000, 0x000000F818181818,
    0x1818181F00000000, 0x181818FF00000000, 0x000000FF18181818, 0x1818181F18181818,
    0x000000FF00000000, 0x181818FF18181818, 0x181F181F18181818, 0x3636363736363636,
    0x3637303F00000000, 0x003F303736363636, 0x36F700FF00000000, 0x00FF00F736363636,
    0x3637303736363636, 0x00FF00FF00000000, 0x36F700F736363636, 0x18FF00FF00000000,
    0x363636FF00000000, 0x00FF00FF18181818, 0x000000FF36363636, 0x3636363F00000000,
    0x181F181F00000000, 0x001F181F18181818, 0x0000003F36363636, 0x363636FF36363636,
    0x18FF18FF18181818, 0x181818F800000000, 0x0000001F18181818, 0xFFFFFFFFFFFFFFFF,
    0x000000FFFFFFFFFF, 0xF0F0F0F0F0F0F0F0, 0x0F0F0F0F0F0F0F0F, 0xFFFFFF0000000000,
    0x0000FC66667C60F0, 0x00007CC6C0C67C00, 0x00007E5A18183C00, 0x0000C6C6C67E067C,
    0x00007CD6D67C1038, 0x0000C66C386CC600, 0x0000CCCCCCCCFE06, 0x0000C6C67E060600,
    0x0000D6D6D6D6FE00, 0x0000D6D6D6D6FF03, 0x0000F0B03C363C00, 0x0000C6C6F6DEF600,
    0x0000F0607C66FC00, 0x00007CC61EC67C00, 0x0000DCD6F6D6DC00, 0x00007EC67E66C600,
    0xFE6268786862FE00, 0x6C007CC6FEC07C00, 0x0030180C1830003C, 0x000C1830180C003C,
    0x0E1B1B1818181818, 0x1818181818D8D870, 0x001818007E001818, 0x0076DC0076DC0000,
    0x00386C6C38000000, 0x0000000018000000, 0x0000003838000000, 0x0F0C0C0CEC6C3C1C,
    0xD86C6C6C6C000000, 0x3048102078000000, 0x00007C7C7C7C0000, 0x0000000000000000,
];
const FONT_WIDTH: usize = 8;
const FONT_HEIGHT: usize = 8;

pub struct Frame {
    width: usize,
    height: usize,
    stride: usize,
    ptr: *mut u32,
}

impl Frame {
    /// Write character
    fn write_ch(&self, x: usize, y: usize, utf_ch: char) {
        let img = FONT[utf_ch as u8 as usize];

        let x_start = x;
        let y_start = y;
        let y_end = usize::min(y + FONT_HEIGHT, self.height);
        let x_end = usize::min(x + FONT_WIDTH, self.width);

        for y in y_start..y_end {
            for x in x_start..x_end {
                if (img >> ((7 + y_start - y) * FONT_WIDTH + (7 + x_start - x))) & 1 == 1 {
                    unsafe {
                        let ptr = self.ptr.add(y * self.stride + x);
                        *ptr = !*ptr;
                    };
                }
            }
        }
    }

    fn write_str(&self, x: usize, y: usize, str: &str) {
        for (index, ch) in str.chars().enumerate() {
            self.write_ch(x + index * FONT_WIDTH, y, ch);
        }
    }

    /// Write string (note: non-ASCII characters are replaced with '*')
    pub fn str(&self, x: usize, y: usize, str: &str) -> &Self {
        self.write_str(x, y, str);
        self
    }

    /// Write single character
    pub fn char(&self, x: usize, y: usize, ch: char) -> &Self {
        self.write_ch(x, y, ch);
        self
    }
}

/// Build frame used for font rendering
pub fn frame(width: usize, height: usize, stride: usize, ptr: *mut u32) -> Frame {
    Frame { width, height, stride, ptr }
}
